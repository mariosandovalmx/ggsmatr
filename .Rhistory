devtools::document()
iris <- data(iris)
devtools::use_data(iris)
usethis::use_mit_license()
globalVariables(c("group", "r2", "pval","Slope","Int", "coef", ".data"))
environment()
environmentName()
environment()
devtools::use_vignette("ggsmatr: example")
devtools::use_vignette("ggsmatr usage")
devtools::use_vignette("ggsmatr")
devtools::use_vignette("ggsmatr: example")
usethat::use_vignette("ggsmatr: example")
install.packages("usethat")
usethat::use_vignette("ggsmatr: example")
setwd("~/ggsmatr")
usethat::use_vignette("ggsmatr: example")
usethis::use_vignette("ggsmatr-vignette")
library(ggsmatr)
library(ggsmatr)
library(ggsmatr)
data(iris)
library(smatr)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar = "Petal.Width", sma.fit =  fit)
library(ggsmatr)
data(iris)
library(smatr)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar = "Petal.Width", sma.fit =  fit)
library(ggsmatr)
library(ggsmatr)
data(iris)
library(smatr)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar = "Petal.Width", sma.fit =  fit)
library(ggsmatr)
data(iris)
library(smatr)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar = "Petal.Width", sma.fit =  fit)
library(ggsmatr)
library(ggsmatr)
library(ggsmatr)
usethis::use_release_issue()
setwd("D:/MegaSync/GitHub/ggsmatr")
usethis::use_release_issue()
usethis::use_release_issue()
library(ggsmatr)
data(iris)
library(smatr)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar = "Petal.Width", sma.fit =  fit)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggsmatr)
data(iris)
library(smatr)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar = "Petal.Width", sma.fit =  fit)
usethis::use_news_md()
usethis::use_testthat()
devtools::test()
library(testthat)
library(ggsmatr)
test_check("ggsmatr")
usethis::use_testthat()
usethis::use_test()
usethis::use_testthat()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_testthat()
usethis::use_test()
usethis::use_release_issue()
usethis::use_testthat()
use_test()
usethis::use_test()
usethis::use_testthat()
usethis::use_test()
devtools::load_all(".")
usethis::use_testthat()
setwd("D:/MegaSync/GitHub/ggsmatr")
usethis::use_vignette("NAME-OF-VIGNETTE")
library(ggsmatr)
library(smatr)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) +
scale_color_manual(values = c("setosa" = "red", "versicolor " = "blue", "virginica" = "yellow"))
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) +
scale_color_manual(values = c("setosa" = "red", "versicolor " = "blue", "virginica" = "yellow"))
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) +
scale_color_manual(values = c("setosa" = "red", "versicolor " = "mediumturquoise", "virginica" = "yellow"))
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)+
scale_color_manual(values = c("setosa" = "red", "versicolor " = "mediumturquoise", "virginica" = "yellow"))
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)+
scale_color_manual(values = c("setosa" = "red", "versicolor " = "green", "virginica" = "yellow"))
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank())
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) +
scale_color_manual(values = c("setosa" = "red", "versicolor " = "mediumturquoise", "virginica" = "yellow"))
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) + scale_colour_manual(values = c("black", "firebrick", "cornflowerblue"))
ggp <-  ggplot2::ggplot(data = data, ggplot2::aes(x = !! x.var,
y = !! y.var,
color= !! grp,
fill= !! grp)) +
ggplot2::geom_point(size=3) +
geom_segment(data = df.pl ,ggplot2::aes(x= min_x, xend= max_x, y=min_y, yend=max_y, colour= group,size= 2),inherit.aes = FALSE)
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) + scale_colour_manual(values = c("black", "firebrick", "cornflowerblue"))
library(ggsmatr)
library(ggsmatr)
library(smatr)
library(ggplot2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) + scale_colour_manual(values = c("black", "firebrick", "cornflowerblue"))
library(ggsmatr)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
library(ggsmatr)
library(ggsmatr)
library(smatr)
library(ggplot2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
library(ggsmatr)
library(ggsmatr)
library(smatr)
library(ggplot2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
library(ggsmatr)
library(ggsmatr)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
library(ggsmatr)
library(ggsmatr)
library(smatr)
library(ggplot2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) + scale_colour_manual(values = c("black", "firebrick", "cornflowerblue"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#This vignette shows how to create a scatter plot based on the coefficients from (Standardised) Major Axis Estimation fit using the "smatr" package and "ggplot" in R.
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) + scale_colour_manual(values = c("black", "firebrick", "cornflowerblue"))
if (!require("remotes")) install.packages("remotes")
remotes::install_github("mariosandovalmx/ggsmatr")
library(ggsmatr)
library(ggsmatr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) + scale_colour_manual(values = c("black", "firebrick", "cornflowerblue"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
library(ggsmatr)
library(smatr)
library(ggplot2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
#Plot is saved as ggp object, and can be edited using ggplot parameters.
library(ggplot2)
ggp + xlab("x axis name") + ylab("y axis name") +theme(legend.position = "right",
legend.title=element_blank()) + scale_colour_manual(values = c("black", "firebrick", "cornflowerblue"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggsmatr)
library(smatr)
library(ggplot2)
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
# plot
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit)
unlink("vignettes/ggsmatr-vignette_cache", recursive = TRUE)
devtools::install()
devtools::build_vignettes()
library(ggsmatr)
help("ggsmatr")
library(ggsmatr)
detach("package:ggsmatr", unload = TRUE)
install.packages("D:/MegaSync/GitHub/ggsmatr_0.1.tar.gz", repos = NULL, type = "source")
library(usethis)
use_release_issue()
use_release_issue()
library(ggsmatr)
library(usethis)
use_release_issue("0.1")
library(ggsmatr)
use_release_issue()
usethis::create_package()
usethis::create_package("D:/MegaSync/GitHub")
usethis::use_version()
use_release_issue()
usethis::use_release_issue()
devtools::load_all(".")
usethis::use_release_issue()
rlang::last_error()
usethis::use_release_issue()
usethis::use_testthat()
devtools::test()
library(testthat)
library(ggsmatr)
test_check("ggsmatr")
devtools::test()
devtools::build()
library(ggsmatr)
testthat::test_that("errors", {
testthat::expect_error(
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit),
"p cannot be less than 0"
)
})
testthat::test_that("errors", {
testthat::expect_error(
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit),
"p cannot be less than 0"
)
})
test_check("ggsmatr")
context("ggsmatr")
testthat::test_that("errors", {
testthat::expect_error(
data(iris)
fit <- sma(Petal.Width ~ Petal.Length+ Species, data=iris)
ggsmatr(data =  iris, groups = "Species", xvar =  "Petal.Length", yvar =
"Petal.Width", sma.fit =  fit),
"p cannot be less than 0"
)
testthat::expect_error(
report_p(2),
"p cannot be greater than 1"
)
})
#' @importFrom dplyr group_by
#' @importFrom tibble rownames_to_column
#' @importFrom dplyr summarise
#' @importFrom dplyr mutate
#' @importFrom dplyr across
#' @importFrom ggplot2 ggplot
#' @importFrom ggplot2 geom_point
#' @importFrom ggplot2 geom_segment
#' @importFrom stats coef
#' @importFrom stats na.omit
ggsmatr <- function(data, groups, xvar, yvar, sma.fit){
if (data= NULL){
stop("you need to provide the database with which the SMA was fitted.")
} else if (sma.fit=NULL) {
stop("you need to provide the fitted SMA")
}else{
x.var <- rlang::sym(xvar)
y.var <- rlang::sym(yvar)
grp <- rlang::sym(groups)
ngrps<- length(unique(data[[groups]]))
# as factors, function from Tlamatini package
as_factorALL<- function(dataframe){
df<- dataframe
df[sapply(df, is.character)] <- lapply(df[sapply(df, is.character)],
as.factor)
return(df)
}
data<- as_factorALL(data)
# define colors
grps.df = unique(data[[groups]])
station_cols = scales::hue_pal()(length(grps.df))
names(station_cols) <- unique(data[[groups]])
fitsall <- sma.fit$groupsummary %>% dplyr::select(group , r2, pval, Slope, Int)
fitsall <- fitsall %>%  mutate_if(is.numeric, round, digits = 3)
fitsall
# extraer coeficientes de SMA, vars:  dataframe  groups   xvar
bb <- data.frame(coef(sma.fit))
bb <- bb %>%
tibble::rownames_to_column(var = "group")
# calcular minimo y maximo del eje x para cada sitio
bb2 <- data %>% dplyr::select(groups, xvar) %>%  dplyr::group_by(.data[[groups]]) %>%
dplyr::summarise(dplyr::across(.cols = xvar,
.fns = list(min = min, max = max),
.names = "{fn}_x"))
names(bb2)[1] <- 'group'
#unir dataframe
bb3 <- base::merge(bb,bb2, by= "group")
#calcular min y max de y con intercepto y elevacion
bb4 <- bb3 %>%
dplyr::mutate(min_y = (slope*min_x) + elevation) %>%
dplyr::mutate(max_y = (slope*max_x) + elevation)
data<- stats::na.omit(data)
df.pl <- cbind(bb4, fitsall[,-1])
print(df.pl[,c(1,8,9)])
ggp <-  ggplot2::ggplot(data = data, ggplot2::aes(x = !! x.var,
y = !! y.var,
color= !! grp,
fill= !! grp)) +
ggplot2::geom_point(size=2, alpha = 0.5) +
geom_segment(data = df.pl ,ggplot2::aes(x= min_x, xend= max_x, y=min_y, yend=max_y, colour= group),inherit.aes = FALSE, size= 1)
.GlobalEnv$ggp <- ggp
return(ggp)}
}
devtools::build_vignettes()
usethis::use_testthat()
testthat::auto_test_package("ggsmatr")
testthat::test_package()
testthat::test_package("ggsmatr")
library(ggsmatr)
# execute the test
devtools::test()
# use code coverage
usethis::use_coverage()
devtools::test_coverage()
usethis::use_coverage()
devtools::test_coverage()
detach("package:ggsmatr", unload = TRUE)
devtools::test_coverage()
devtools::test()
devtools::test("ggsmatr")
devtools::test("D:/MegaSync/GitHub/ggsmatr")
devtools::document()
devtools::build_vignettes()
devtools::build()
usethis::use_package_doc()
codemetar::write_codemeta()
install.packages("codemetar")
codemetar::write_codemeta()
give_opinions('D:\MegaSync\GitHub\ggsmatr')
give_opinions('D:/MegaSync/GitHub/ggsmatr')
codemetar::give_opinions('D:/MegaSync/GitHub/ggsmatr')
codemetar::give_opinions('D:/MegaSync/GitHub/ggsmatr')
devtools::run_examples()
library(ggsmatr)
